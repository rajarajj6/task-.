http1 vs http2:

The Hypertext Transfer Protocol, or HTTP, is an application protocol that has been the de facto standard for
 communication on the World Wide Web since its invention in 1989. From the release of HTTP/1.1 in 1997 until recently, 
there have been few revisions to the protocol. But in 2015, a reimagined version called HTTP/2 came into use,
 which offered several methods to decrease latency, especially when dealing with mobile platforms and server-intensive graphics and videos. 
HTTP/2 has since become increasingly popular, with some estimates suggesting that around a third of all websites in the world support it. 
In this changing landscape, web developers can benefit from understanding the technical differences between HTTP/1.1 and HTTP/2,
 allowing them to make informed and efficient decisions about evolving best practices.

After reading this article, you will understand the main differences between HTTP/1.1 and HTTP/2,
 concentrating on the technical changes HTTP/2 has adopted to achieve a more efficient Web protocol.


2. Write a blog about objects and its internal representation in Javascript?

Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript.
 These objects are quite different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol) 
in the sense that while these primitive data-types all store a single value each (depending on their types).
Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value.
 That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.
Loosely speaking, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types,
 in the form of “key: value” pairs. These keys can be variables or functions and are called properties and methods, respectively,
 in the context of an object.
For Eg. If your object is a student, it will have properties like name, age, address, id, etc and methods like updateAddress, updateNam, etc.